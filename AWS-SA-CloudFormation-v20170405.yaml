AWSTemplateFormatVersion: '2010-09-09'
Description: Production Stack for SA Assessment

Parameters:

  CandidateName:
    Description: 'Please input your first and last name:'
    Type: String
    MaxLength: '50'
    MinLength: '3'
    ConstraintDescription: 'Please input your full name.'

  AppInstanceType:
    Description: 'Please input the Instance Type for the Web Application:'
    Type: String
    Default: t2.micro
    ConstraintDescription: 'Must be a valid EC2 instance type.'

  BastionInstanceType:
    Description: 'Please input the Instance Type for the Bastion:'
    Type: String
    Default: t2.micro
    ConstraintDescription: 'Must be a valid EC2 instance type.'

  KeyName:
    Description: 'Please input the Key Pair name:'
    Type: String
    Default: ''
    ConstraintDescription: 'Must be a valid Key pair name in the Region.'

  AppASGMinSize:
    Description: 'Please input min number of App Instance for the Autoscaling Group:'
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 3
    ConstraintDescription: 'Must be >= 1'

  AppASGMaxSize:
    Description: 'Please input min number of App Instance for the Autoscaling Group:'
    Type: Number
    Default: 3
    MinValue: 3
    MaxValue: 6
    ConstraintDescription: 'Must be >= AppASGMinSize parameter'

  AppASGDesiredSize:
    Description: 'Please input min number of App Instance for the Autoscaling Group:'
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 6
    ConstraintDescription: 'Must be >= AppASGMinSize parameter'

  CreateBastion:
    Description: 'Do you want to create a Bastion Host?'
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    ConstraintDescription: 'Must specify yes or no.'

  MultiNATGateway:
    Description: 'Do you want to create multiple NAT Gateway (1 for each AZ?)?'
    Type: String
    Default: 'yes'
    AllowedValues:
    - 'yes'
    - 'no'
    ConstraintDescription: 'Must specify yes or no.'

Conditions:
  CreateBastionResource: !Equals [ !Ref CreateBastion, 'yes' ]
  MultiNATGatewayResource: !Equals [ !Ref MultiNATGateway, 'yes' ]
  SingleNATGatewayResource: !Equals [ !Ref MultiNATGateway, 'no' ]

Mappings:


  AWSRegion2AMI:
    us-east-1: # US East (N. Virginia)
      AMIApp: ami-0b33d91d
      AMIBastion: ami-0b33d91d
    us-east-2: # US East (Ohio)
      AMIApp: ami-c55673a0
      AMIBastion: ami-c55673a0
    us-west-2: # US West (Oregon)
      AMIApp: ami-f173cc91
      AMIBastion: ami-f173cc91
    us-west-1: # US West (N. California)
      AMIApp: ami-165a0876
      AMIBastion: ami-165a0876
    eu-west-1: # EU (Ireland)
      AMIApp: ami-70edb016
      AMIBastion: ami-70edb016
    eu-west-2: # EU (London)
      AMIApp: ami-f1949e95
      AMIBastion: ami-f1949e95
    eu-central-1: # EU (Frankfurt)
      AMIApp: ami-af0fc0c0
      AMIBastion: ami-af0fc0c0
    ap-southeast-1: # Asia Pacific (Singapore)
      AMIApp: ami-dc9339bf
      AMIBastion: ami-dc9339bf
    ap-northeast-2: # Asia Pacific (Seoul)
      AMIApp: ami-dac312b4
      AMIBastion: ami-dac312b4
    ap-northeast-1: # Asia Pacific (Tokyo)
      AMIApp: ami-56d4ad31
      AMIBastion: ami-56d4ad31
    ap-southeast-2: # Asia Pacific (Sydney)
      AMIApp: ami-1c47407f
      AMIBastion: ami-1c47407f
    ap-south-1: # Asia Pacific (Mumbai)
      AMIApp: ami-f9daac96
      AMIBastion: ami-f9daac96
    sa-east-1: # South America (SÃ£o Paulo)
      AMIApp: ami-80086dec
      AMIBastion: ami-80086dec


Resources:

  SAVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [SAVPC, !Ref 'CandidateName']]

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PublicSubnetA, !Ref 'CandidateName']]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PublicSubnetB, !Ref 'CandidateName']]

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PrivateSubnetA, !Ref 'CandidateName']]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PrivateSubnetB, !Ref 'CandidateName']]

  SAIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [IGW, !Ref 'CandidateName']]

  SANetworkACLPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PublicNACL, !Ref 'CandidateName']]


  SANetworkACLPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PrivateNACL, !Ref 'CandidateName']]

  SARoutePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PublicRoute, !Ref 'CandidateName']]

  SARoutePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PrivateRouteA, !Ref 'CandidateName']]

  SARoutePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SAVPC'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [PrivateRouteB, !Ref 'CandidateName']]

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref "AWS::Region", AMIApp]
      InstanceType: !Ref 'AppInstanceType'
      #  UNCOMMENT IF YOU NEED TO ACCESS THE INSTANCE
      #KeyName: !Ref 'KeyName'
      InstanceMonitoring: 'false'
      AssociatePublicIpAddress: 'false'
      UserData: IyEvYmluL2Jhc2gNCnl1bSB1cGRhdGUgLXkNCnl1bSBpbnN0YWxsIC15IGh0dHBkMjQNCnNlcnZpY2UgaHR0cGQgc3RhcnQNCmNoa2NvbmZpZyBodHRwZCBvbg0KZ3JvdXBhZGQgd3d3DQp1c2VybW9kIC1hIC1HIHd3dyBlYzItdXNlcg0KY2hvd24gLVIgcm9vdDp3d3cgL3Zhci93d3cNCmNobW9kIDI3NzUgL3Zhci93d3cNCmZpbmQgL3Zhci93d3cgLXR5cGUgZCAtZXhlYyBjaG1vZCAyNzc1IHt9ICsNCmZpbmQgL3Zhci93d3cgLXR5cGUgZiAtZXhlYyBjaG1vZCAwNjY0IHt9ICsNCmVjaG8gJzxodG1sPjxoZWFkPjx0aXRsZT5TdWNjZXNzITwvdGl0bGU+PC9oZWFkPjxib2R5PjxpZnJhbWUgd2lkdGg9IjU2MCIgaGVpZ2h0PSIzMTUiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvSnMyMXhLTUZkd3ciIGZyYW1lYm9yZGVyPSIwIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+PC9ib2R5PjwvaHRtbD4nID4gL3Zhci93d3cvaHRtbC9kZW1vLmh0bWw=
      SecurityGroups:
      - !Ref 'SASGapp'

  AppAutoScalingGroupMultiNATGW:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: MultiNATGatewayResource
    Properties:
      AvailabilityZones:
      - !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      - !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VPCZoneIdentifier:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref 'AppLaunchConfiguration'
      MinSize: !Ref 'AppASGMinSize'
      DesiredCapacity: !Ref 'AppASGDesiredSize'
      MaxSize: !Ref 'AppASGMaxSize'
      LoadBalancerNames:
      - !Ref SAelb
    DependsOn: [ AppLaunchConfiguration, NatGatewayA, NatGatewayB]


  AppAutoScalingGroupSingleNATGW:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: SingleNATGatewayResource
    Properties:
      AvailabilityZones:
      - !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      - !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VPCZoneIdentifier:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref 'AppLaunchConfiguration'
      MinSize: !Ref 'AppASGMinSize'
      DesiredCapacity: !Ref 'AppASGDesiredSize'
      MaxSize: !Ref 'AppASGMaxSize'
      LoadBalancerNames:
      - !Ref SAelb
    DependsOn: [ AppLaunchConfiguration, NatGatewayA ]

  Bastion:
    Type: AWS::EC2::Instance
    Condition: CreateBastionResource
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [AWSRegion2AMI, !Ref "AWS::Region", AMIBastion]
      InstanceType: !Ref 'BastionInstanceType'
      Monitoring: 'false'
      #  UNCOMMENT IF YOU NEED TO ACCESS THE INSTANCE
      #KeyName: !Ref 'KeyName'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [Bastion, !Ref 'CandidateName']]
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        Description: Primary network interface
        DeviceIndex: 0
        SubnetId: !Ref 'PublicSubnetA'
        GroupSet: [!Ref 'SASGBastion']
    DependsOn: SAIGWAttachment

  SAelb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: [!Ref 'PublicSubnetA', !Ref 'PublicSubnetB']
      SecurityGroups: [!Ref 'SASGELB']
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '15'
        Target: TCP:80
        Timeout: '5'
        UnhealthyThreshold: '2'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [ELB, !Ref 'CandidateName']]

  SASGELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SA Assignment - ELB security group
      VpcId: !Ref 'SAVPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: ELBSecurityGroup

  SASGapp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SA Assignment - App server security group
      VpcId: !Ref 'SAVPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref 'SASGELB'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref 'SASGBastion'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: AppServerSecurityGroup

  SASGBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SA Assignment - App server security group
      VpcId: !Ref 'SAVPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: BastionSecurityGroup

  SANACLEntry1Public:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref 'SANetworkACLPublic'

  SANACLEntry2Public:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref 'SANetworkACLPublic'

  SANACLEntry1EgressPrivate:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref 'SANetworkACLPrivate'

  SANACLEntry1Private:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref 'SANetworkACLPrivate'

  SANACLEntry2Private:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.0.0.0/16
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      RuleNumber: '101'
      NetworkAclId: !Ref 'SANetworkACLPrivate'

  SANACLEntry3Private:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      RuleNumber: '102'
      NetworkAclId: !Ref 'SANetworkACLPrivate'

  subnetacl1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'SANetworkACLPublic'
      SubnetId: !Ref 'PublicSubnetA'

  subnetacl2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'SANetworkACLPublic'
      SubnetId: !Ref 'PublicSubnetB'

  subnetacl3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'SANetworkACLPrivate'
      SubnetId: !Ref 'PrivateSubnetA'

  subnetacl4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'SANetworkACLPrivate'
      SubnetId: !Ref 'PrivateSubnetB'

  SAIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'SAVPC'
      InternetGatewayId: !Ref 'SAIGW'

  subnetRoutePublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SARoutePublic'
      SubnetId: !Ref 'PublicSubnetA'

  subnetRoutePublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SARoutePublic'
      SubnetId: !Ref 'PublicSubnetB'

  subnetRoutePrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SARoutePrivateA'
      SubnetId: !Ref 'PrivateSubnetA'

  subnetRoutePrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'SARoutePrivateB'
      SubnetId: !Ref 'PrivateSubnetB'

  publicroute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'SARoutePublic'
      GatewayId: !Ref 'SAIGW'
    DependsOn: SAIGW

  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPB:
    Type: AWS::EC2::EIP
    Condition: MultiNATGatewayResource
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIPA
        - AllocationId
      SubnetId: !Ref 'PublicSubnetA'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [NatGatewayA, !Ref 'CandidateName']]

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: MultiNATGatewayResource
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIPB
        - AllocationId
      SubnetId: !Ref 'PublicSubnetB'
      Tags:
      - Key: environment
        Value: sa-assignment
      - Key: Name
        Value: !Join ['-', [NatGatewayB, !Ref 'CandidateName']]

  privaterouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'SARoutePrivateA'
      NatGatewayId: !Ref 'NatGatewayA'
    DependsOn: NatGatewayA

  singleGWPrivaterouteB:
    Type: AWS::EC2::Route
    Condition: SingleNATGatewayResource
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'SARoutePrivateB'
      NatGatewayId: !Ref 'NatGatewayA'
    DependsOn: NatGatewayA

  multiGWPrivaterouteB:
    Type: AWS::EC2::Route
    Condition: MultiNATGatewayResource
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'SARoutePrivateB'
      NatGatewayId: !Ref 'NatGatewayB'
    DependsOn: NatGatewayB

Outputs:


  LoadBalancerDNSName:
    Description: The DNSName of the load balancer
    Value: !GetAtt SAelb.DNSName
